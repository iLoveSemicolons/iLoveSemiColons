{"version":3,"sources":["../node_modules/formriderjs/src/validators/checkInputContainCapitalLetters.js"],"names":["CheckInputContainCapitalLetters","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","typeofPropertyValue","inputIsBeingUsed","length","numberOfCapitalLetters","capitalLettersCounter","i","toUpperCase","toLowerCase","test","push","propertyValueMinimum","propertyValueMaximum","typeofPropertyValueMinimum","typeofPropertyValueMaximum"],"mappings":"4MACaA,EAAb,WACI,aAAc,oBACVC,KAAKC,qBAAuB,GAFpC,qDAOaC,EAAwBC,EAAeC,EAAeC,EAAgBC,GAC3E,IAAIC,SAA8BJ,EAI9BK,EAAmB,SAASH,GAC5B,OAAGA,EAAeI,OAAS,GAGE,IAA1BJ,EAAeI,aAAlB,GAMAC,EAAyB,EACzBC,EAAwB,SAAUN,GAClC,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAeI,OAAQG,IACnCP,EAAeO,KAAOP,EAAeO,GAAGC,eACrCR,EAAeO,KAAOP,EAAeO,GAAGE,eAC3CJ,KAKZ,GAA4B,YAAxBH,EAAmC,CACnC,IAAsB,IAAlBJ,EAAwB,CAIxB,IAHY,QAGFY,KAAKV,GAGX,OAAO,EAFPL,KAAKC,qBAAqBe,KAAKZ,EAAcE,GAMrD,IAAsB,IAAlBH,EAAyB,CAGzB,IAFY,QAEFY,KAAKV,GAGX,OAAO,EAFPL,KAAKC,qBAAqBe,KAAKZ,EAAcE,SAMlD,GAA4B,WAAxBC,GAAoCC,EAAiBH,GAAiB,CAI7E,GAFAM,EAAsBN,GAElBF,IAAkBO,EAGlB,OAAO,EAFPV,KAAKC,qBAAqBe,KAAKZ,EAAcE,QAK9C,GAA4B,WAAxBC,GAAoCC,EAAiBH,GAAiB,CAC7E,IAAIY,EAAuBd,EAAc,GACrCe,EAAuBf,EAAc,GACrCgB,SAAqCF,EACrCG,SAAqCF,EAGzC,IAA6B,IAAzBD,GAAgE,WAA/BG,EAAyC,CAG1E,GADAT,EAAsBN,KACS,IAA3BK,GAAgCA,EAAyBQ,GAGzD,OAAO,EAFPlB,KAAKC,qBAAqBe,KAAKZ,EAAcE,QAK9C,GAAmC,WAA/Ba,IAAoE,IAAzBD,EAA+B,CAEjF,GADAP,EAAsBN,KACS,IAA3BK,GAAgCA,EAAyBO,GAGzD,OAAO,EAFPjB,KAAKC,qBAAqBe,KAAKZ,EAAcE,QAI9C,GAAmC,WAA/Ba,GAA0E,WAA/BC,EAAyC,CAE3F,GADAT,EAAsBN,KAClBK,EAAyBO,GAAwBP,EAAyBQ,GAG1E,OAAO,EAFPlB,KAAKC,qBAAqBe,KAAKZ,EAAcE,SA1FjE","file":"static/js/6.2dd0c9eb.chunk.js","sourcesContent":["\r\nexport class CheckInputContainCapitalLetters{\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let typeofPropertyValue = typeof (propertyValue);\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        let numberOfCapitalLetters = 0;\r\n        let capitalLettersCounter = function (formInputValue) {\r\n            for (let i = 0; i < formInputValue.length; i++) {\r\n                if (formInputValue[i] === formInputValue[i].toUpperCase()\r\n                    && formInputValue[i] !== formInputValue[i].toLowerCase()) {\r\n                    numberOfCapitalLetters++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeofPropertyValue === \"boolean\") {\r\n            if (propertyValue === true) {\r\n                let regex = /[a-z]/;\r\n\r\n                // Regular expression in order to test if all characters are Uppercase\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (propertyValue === false) {\r\n                let regex = /[A-Z]/;\r\n\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n\r\n            capitalLettersCounter(formInputValue);\r\n\r\n            if (propertyValue !== numberOfCapitalLetters) {\r\n                this.validationErrorArray.push(formInputName,propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n            let typeofPropertyValueMinimum = typeof (propertyValueMinimum);\r\n            let typeofPropertyValueMaximum = typeof (propertyValueMaximum);\r\n\r\n\r\n            if (propertyValueMinimum === true && typeofPropertyValueMaximum === \"number\") {\r\n\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters === 0 || numberOfCapitalLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n\r\n            } else if (typeofPropertyValueMinimum === \"number\" && propertyValueMaximum === true) {\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters === 0 || numberOfCapitalLetters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeofPropertyValueMinimum === \"number\" && typeofPropertyValueMaximum === \"number\") {\r\n                capitalLettersCounter(formInputValue);\r\n                if (numberOfCapitalLetters < propertyValueMinimum || numberOfCapitalLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/formriderjs/src/validators/checkInputContainSmallLetters.js"],"names":["CheckInputContainSmallLetters","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","typeofPropertyValue","inputIsBeingUsed","length","numberOfSmallLetters","smallLettersCounter","i","toLowerCase","toUpperCase","test","push","propertyValueMinimum","propertyValueMaximum","typeofPropertyValueMinimum","typeofPropertyValueMaximum"],"mappings":"0MAAaA,EAAb,WACI,aAAc,oBACVC,KAAKC,qBAAuB,GAFpC,qDAMaC,EAAwBC,EAAeC,EAAeC,EAAgBC,GAC3E,IAAIC,SAA8BJ,EAI9BK,EAAmB,SAASH,GAC5B,OAAGA,EAAeI,OAAS,GAGE,IAA1BJ,EAAeI,aAAlB,GAOAC,EAAuB,EACvBC,EAAsB,SAAUN,GAChC,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAeI,OAAQG,IACnCP,EAAeO,KAAOP,EAAeO,GAAGC,eAAiBR,EAAeO,KAAOP,EAAeO,GAAGE,eACjGJ,KAKZ,GAA4B,YAAxBH,EAAmC,CACnC,IAAsB,IAAlBJ,EAAwB,CAGxB,IAFY,QAEFY,KAAKV,GAGX,OAAO,EAFPL,KAAKC,qBAAqBe,KAAKZ,EAAeE,GAMtD,IAAsB,IAAlBH,EAAyB,CAEzB,IADY,QACFY,KAAKV,GAGX,OAAO,EAFPL,KAAKC,qBAAqBe,KAAKZ,EAAeE,SAMnD,GAA4B,WAAxBC,GAAoCC,EAAiBH,GAAiB,CAG7E,GADAM,EAAoBN,GAChBF,IAAkBO,EAGlB,OAAO,EAFPV,KAAKC,qBAAqBe,KAAKZ,EAAeE,QAK/C,GAA4B,WAAxBC,GAAoCC,EAAiBH,GAAiB,CAC7E,IAAIY,EAAuBd,EAAc,GACrCe,EAAuBf,EAAc,GACrCgB,SAAqCF,EACrCG,SAAqCF,EAGzC,IAA6B,IAAzBD,GAAgE,WAA/BG,EAAyC,CAG1E,GADAT,EAAoBN,KACS,IAAzBK,GAA8BA,EAAuBQ,GAGrD,OAAO,EAFPlB,KAAKC,qBAAqBe,KAAKZ,EAAeE,QAK/C,GAAmC,WAA/Ba,IAAoE,IAAzBD,EAA+B,CAEjF,GADAP,EAAoBN,KACS,IAAzBK,GAA8BA,EAAuBO,GAGrD,OAAO,EAFPjB,KAAKC,qBAAqBe,KAAKZ,EAAeE,QAI/C,GAAmC,WAA/Ba,GAA0E,WAA/BC,EAAyC,CAE3F,GADAT,EAAoBN,KAChBK,EAAuBO,GAAwBP,EAAuBQ,GAGtE,OAAO,EAFPlB,KAAKC,qBAAqBe,KAAKZ,EAAeE,SAtFlE","file":"static/js/7.9f452d4a.chunk.js","sourcesContent":["export class CheckInputContainSmallLetters {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n\r\n    }\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let typeofPropertyValue = typeof (propertyValue);\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        let numberOfSmallLetters = 0;\r\n        let smallLettersCounter = function (formInputValue) {\r\n            for (let i = 0; i < formInputValue.length; i++) {\r\n                if (formInputValue[i] === formInputValue[i].toLowerCase() && formInputValue[i] !== formInputValue[i].toUpperCase()) {\r\n                    numberOfSmallLetters++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeofPropertyValue === \"boolean\") {\r\n            if (propertyValue === true) {\r\n                let regex = /[A-Z]/;\r\n                // Regular expression in order to test if all characters are Uppercase\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            if (propertyValue === false) {\r\n                let regex = /[a-z]/;\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n\r\n            smallLettersCounter(formInputValue);\r\n            if (propertyValue !== numberOfSmallLetters) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n\r\n        } else if (typeofPropertyValue === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n            let typeofPropertyValueMinimum = typeof (propertyValueMinimum);\r\n            let typeofPropertyValueMaximum = typeof (propertyValueMaximum);\r\n\r\n\r\n            if (propertyValueMinimum === true && typeofPropertyValueMaximum === \"number\") {\r\n\r\n                smallLettersCounter(formInputValue);\r\n                if (numberOfSmallLetters === 0 || numberOfSmallLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n\r\n            } else if (typeofPropertyValueMinimum === \"number\" && propertyValueMaximum === true) {\r\n                smallLettersCounter(formInputValue);\r\n                if (numberOfSmallLetters === 0 || numberOfSmallLetters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeofPropertyValueMinimum === \"number\" && typeofPropertyValueMaximum === \"number\") {\r\n                smallLettersCounter(formInputValue);\r\n                if (numberOfSmallLetters < propertyValueMinimum || numberOfSmallLetters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}
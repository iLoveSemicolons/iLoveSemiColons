{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/formriderjs/src/validators/checkInputDateFormat.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","CheckInputDateFormat","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","propertyDateValueArray","propertyDateLimitationArray","propertyDateSeparator","propertyDateValueArrayLength","formInputValueLength","numberCounter","string","numberOfNumbersInFormInput","character","characterAsNumber","Number","numberOfDateValueFieldContainingNumber","indexOfDateValueFieldContainingNumber","numberOfDateValueFieldsContainingTrue","indexOfDateValueFieldContainingTrue","push","window","alert","checkAllDateValueArrayFieldsType","checkCharacterIfNumber","test","numberOfNumbersInFormInputValue","testForSpecialChars","numberOfNumbersInPropertyDateValueArray","characterNumber","sumOfNumbersInPropertyDateValueArray","startingIndex","doCheckForWhiteSpace","propertyDateValue","propertyDateLimitationMinValue","propertyDateLimitationMaxValue","slicedValue","slice","characterIsNumber","stringLength","x","dateSeparatorNumberInFormInput","regex","match","dateSeparatorCounter","RegExp","formInputValueSplit","split","numberOfNumbersInOneSplit"],"mappings":"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","file":"static/js/4.5303f46f.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export class CheckInputDateFormat {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n\r\n        let propertyDateValueArray = propertyValue[0];\r\n        let propertyDateLimitationArray = propertyValue[1];\r\n        let propertyDateSeparator = propertyValue[2][0];\r\n        let propertyDateValueArrayLength = propertyDateValueArray.length;\r\n        let propertyDateLimitationArrayLength = propertyDateLimitationArray.length;\r\n        let formInputValueLength = formInputValue.length;\r\n\r\n\r\n        //=====================================================================================\r\n        let dateSeparatorCounter = function(string, regex) {\r\n                return (string.match(regex) || []).length;\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let numberCounter = function(string) {\r\n            let numberOfNumbersInFormInput = 0;\r\n\r\n            for (let character of string) {\r\n                let characterAsNumber = Number(character);\r\n                if (characterAsNumber !== characterAsNumber || character === \" \") {} else {\r\n                    numberOfNumbersInFormInput++;\r\n                }\r\n            }\r\n            return numberOfNumbersInFormInput;\r\n        };\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let sumOfNumbersInPropertyDateValueArray = function() {\r\n            let characterNumber = 0;\r\n            for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                    characterNumber = characterNumber + propertyDateValueArray[i];\r\n                }\r\n            }\r\n            return characterNumber;\r\n        };\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        let numberOfDateValueFieldContainingNumber = 0;\r\n        let indexOfDateValueFieldContainingNumber = [];\r\n        let numberOfDateValueFieldsContainingTrue = 0;\r\n        let indexOfDateValueFieldContainingTrue = [];\r\n\r\n\r\n        //check all date values, if it is a number or true, then increment values above here ^\r\n        let checkAllDateValueArrayFieldsType = function() {\r\n            for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                    numberOfDateValueFieldContainingNumber++;\r\n                    indexOfDateValueFieldContainingNumber.push(i);\r\n                }\r\n\r\n                if (propertyDateValueArray[i] === true) {\r\n                    numberOfDateValueFieldsContainingTrue++;\r\n                    indexOfDateValueFieldContainingTrue.push(i);\r\n                }\r\n\r\n\r\n\r\n                //throw an error, when  it is nor true nor number type\r\n                if (propertyDateValueArray[i] !== true && typeof(propertyDateValueArray[i]) !== \"number\") {\r\n                    window.alert(\"FormRider.js ERROR : Property value of dateFormat can only contain values type of number or true\");\r\n                }\r\n            }\r\n        };\r\n        checkAllDateValueArrayFieldsType();\r\n        //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a character is number, otherwise return false\r\n        let checkCharacterIfNumber = function(character) {\r\n                let regex = /[0-9]/g;\r\n                return regex.test(character);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a string contains white space, otherwise return false\r\n        let doCheckForWhiteSpace = function(string) {\r\n                let regex = /\\s+/g;\r\n                return regex.test(string);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n        //=====================================================================================\r\n        //return true if a string contains special characters, otherwise return false\r\n        let doTestStringForSpecialChars = function(string) {\r\n                let regex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\r\n                return regex.test(string);\r\n            }\r\n            //=====================================================================================\r\n\r\n\r\n        let numberOfNumbersInFormInputValue = numberCounter(formInputValue);\r\n        let testForSpecialChars = doTestStringForSpecialChars(formInputValue);\r\n        let numberOfNumbersInPropertyDateValueArray = sumOfNumbersInPropertyDateValueArray();\r\n        let startingIndex = 0;\r\n\r\n\r\n        if (checkCharacterIfNumber(formInputValue[formInputValueLength - 1]) === false && formInputValueLength > 0) {\r\n            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n        }\r\n\r\n\r\n        //when there is no separator\r\n        if (propertyDateSeparator === \"\" && formInputValueLength > 0) {\r\n            /*  ERROR CASES MANAGEMENT\r\n                -if the input is not only numbers but but JSON said the input should be only numbers\r\n                -if the input is only numbers but JSON said it should be numbers and characters\r\n                -if sum of numbers in JSON is not equal to number of numbers in form input\r\n                -if there is white spaces in the input\r\n            * */\r\n            if ((testForSpecialChars === true) ||\r\n                ((numberOfNumbersInFormInputValue !== formInputValueLength && numberOfDateValueFieldContainingNumber === propertyDateValueArrayLength) && (formInputValueLength > 0)) ||\r\n                ((numberOfNumbersInFormInputValue === formInputValueLength && numberOfDateValueFieldsContainingTrue > 0) && (formInputValueLength > 0)) ||\r\n                ((numberOfNumbersInFormInputValue !== numberOfNumbersInPropertyDateValueArray) && (formInputValueLength > 0)) ||\r\n                doCheckForWhiteSpace(formInputValue) === true) {\r\n\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                //another way of saying that JSON wants \"Input should contain only numbers\"\r\n                if (numberOfDateValueFieldContainingNumber === propertyDateValueArrayLength) {\r\n\r\n                    for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n\r\n                        let propertyDateValue = propertyDateValueArray[i];\r\n\r\n                        let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                        let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                        let slicedValue = formInputValue.slice(startingIndex, startingIndex + propertyDateValue);\r\n                        startingIndex += propertyDateValue;\r\n\r\n                        // incrementing the startingIndex so next value will be a new slice\r\n                        if (slicedValue < propertyDateLimitationMinValue ||\r\n                            slicedValue > propertyDateLimitationMaxValue) {\r\n\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //====================================================================================================\r\n                // IT SHOULD CONTAIN a STRING e.g. 04september1994\r\n                if (numberOfDateValueFieldsContainingTrue === 1) {\r\n\r\n                    for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                        let characterIsNumber = checkCharacterIfNumber(formInputValue[startingIndex]);\r\n                        let propertyDateValue = propertyDateValueArray[i];\r\n                        let stringLength = 0;\r\n                        let slicedValue;\r\n\r\n\r\n\r\n                        if (typeof(propertyDateValue) === \"number\") {\r\n\r\n                            //thi\"s might only catch the first character in the input\r\n                            if (characterIsNumber === false) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n\r\n\r\n                            if (characterIsNumber === true) {\r\n                                let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                                let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                                slicedValue = formInputValue.slice(startingIndex, startingIndex + propertyDateValue);\r\n                                startingIndex += propertyDateValue;\r\n\r\n\r\n                                if (slicedValue < propertyDateLimitationMinValue ||\r\n                                    slicedValue > propertyDateLimitationMaxValue) {\r\n                                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (propertyDateValue === true) {\r\n\r\n                            if (characterIsNumber === true) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n\r\n                            for (let x = startingIndex; x < formInputValueLength; x++) {\r\n\r\n                                let characterIsNumber = checkCharacterIfNumber(formInputValue[x]);\r\n\r\n                                if (characterIsNumber === false) {\r\n                                    stringLength++;\r\n                                } else if (stringLength >= 20) {\r\n\r\n                                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                                } else if (characterIsNumber === true) {\r\n                                    startingIndex += stringLength;\r\n\r\n                                    //get out of loop if it encounters a number\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //when there is more than one field in property date value containing true\r\n                if (numberOfDateValueFieldsContainingTrue > 1) {\r\n                    window.alert(\"FormRider.js ERROR ::: Property value of dateFormat more than a single true value located at the propertyDateValueArray[1]\");\r\n                }\r\n                //====================================================================================================\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        //when there is a separator\r\n        if (propertyDateSeparator !== \"\" && formInputValueLength > 0) {\r\n            let dateSeparatorRegex = new RegExp(propertyDateSeparator, \"g\");\r\n\r\n            //number of date separator in formInput\r\n            let dateSeparatorNumberInFormInput = dateSeparatorCounter(formInputValue, dateSeparatorRegex);\r\n\r\n            if (dateSeparatorNumberInFormInput !== propertyDateValueArrayLength - 1) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n\r\n            if (dateSeparatorNumberInFormInput === propertyDateValueArrayLength - 1) {\r\n                let formInputValueSplit = formInputValue.split(propertyDateSeparator);\r\n                for (let i = 0; i < propertyDateValueArrayLength; i++) {\r\n                    let numberOfNumbersInOneSplit = numberCounter(formInputValueSplit[i]);\r\n\r\n                    if (typeof(propertyDateValueArray[i]) === \"number\") {\r\n                        if (numberOfNumbersInOneSplit !== propertyDateValueArray[i] ||\r\n                            formInputValueSplit[i].length !== propertyDateValueArray[i]) {\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        } else {\r\n                            let propertyDateLimitationMinValue = propertyDateLimitationArray[i][0];\r\n                            let propertyDateLimitationMaxValue = propertyDateLimitationArray[i][1];\r\n\r\n                            if (formInputValueSplit[i] < propertyDateLimitationMinValue ||\r\n                                formInputValueSplit[i] > propertyDateLimitationMaxValue) {\r\n                                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (propertyDateValueArray[i] === true) {\r\n                        let characterIsNumber = checkCharacterIfNumber(formInputValueSplit[i]);\r\n\r\n\r\n                        if ((formInputValueSplit[i].length > 12) ||\r\n                            (characterIsNumber === true)) {\r\n                            this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}
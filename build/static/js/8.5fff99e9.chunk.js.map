{"version":3,"sources":["../node_modules/formriderjs/src/validators/checkInputContainSpecialCharacters.js"],"names":["CheckInputContainSpecialCharacters","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","inputIsBeingUsed","length","regex","numberOfSpecialCharacters","match","formInputLength","push","test","propertyValueMinimum","propertyValueMaximum"],"mappings":"+MAAaA,EAAb,WACI,aAAc,oBACVC,KAAKC,qBAAuB,GAFpC,qDAMaC,EAAwBC,EAAeC,EAAeC,EAAgBC,GAI3E,IAAIC,EAAmB,SAASF,GAC5B,OAAGA,EAAeG,OAAS,GAGE,IAA1BH,EAAeG,aAAlB,GAOAC,EAAQ,yCAIRC,GAAkDL,EAFnCM,MAAMF,IAAU,IAAID,OAInCI,EAAkBP,EAAeG,OAIjC,IAAsB,IAAlBL,EAAwB,CACxB,KAAIS,EAAkBF,GAGlB,OAAO,EAFPV,KAAKC,qBAAqBY,KAAKT,EAAeE,QAI/C,IAAsB,IAAlBH,EAAyB,CAChC,IAAIM,EAAMK,KAAKT,GAGX,OAAO,EAFPL,KAAKC,qBAAqBY,KAAKT,EAAeE,GAM1D,GAA+B,kBAAnBH,GAA+BI,EAAiBF,GAAiB,CACzE,GAAIK,IAA8BP,EAG9B,OAAO,EAFPH,KAAKC,qBAAqBY,KAAKT,EAAeE,GAKtD,GAA+B,kBAAnBH,GAA+BI,EAAiBF,GAAiB,CACzE,IAAIU,EAAuBZ,EAAc,GACrCa,EAAuBb,EAAc,GAEzC,GAAsC,kBAA1BY,IACoB,IAAzBC,EAA+B,CAClC,KAAIN,EAA4BK,GAG5B,OAAO,EAFPf,KAAKC,qBAAqBY,KAAKT,EAAeE,QAI/C,IAA6B,IAAzBS,GAC8B,kBAA1BC,EAAoC,CAE/C,KAAIN,EAA4BM,GAG5B,OAAO,EAFPhB,KAAKC,qBAAqBY,KAAKT,EAAeE,OAIT,kBAA1BS,GACsB,kBAA1BC,IAEPN,EAA4BK,GACzBL,EAA4BM,IAC/BhB,KAAKC,qBAAqBY,KAAKT,EAAeE,QA5ElE","file":"static/js/8.5fff99e9.chunk.js","sourcesContent":["export class CheckInputContainSpecialCharacters {\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n\r\n\r\n        //return true if input is being used / return false if not\r\n        let inputIsBeingUsed = function(formInputValue){\r\n            if(formInputValue.length > 0) {\r\n                return true;\r\n            }\r\n            if(formInputValue.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        let regex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\r\n        let specialCharacterCount = (string) => {\r\n            return (string.match(regex) || []).length;\r\n        };\r\n        let numberOfSpecialCharacters = specialCharacterCount(formInputValue);\r\n\r\n        let formInputLength = formInputValue.length;\r\n\r\n        if (typeof (propertyValue === \"boolean\")) {\r\n\r\n            if (propertyValue === true) {\r\n                if (formInputLength > numberOfSpecialCharacters) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (propertyValue === false) {\r\n                if (regex.test(formInputValue)) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (typeof (propertyValue) === \"number\" && inputIsBeingUsed(formInputValue)) {\r\n            if (numberOfSpecialCharacters !== propertyValue) {\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        if (typeof (propertyValue) === \"object\" && inputIsBeingUsed(formInputValue)) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n\r\n            if (typeof (propertyValueMinimum) === \"number\"\r\n                && propertyValueMaximum === true) {\r\n                if (numberOfSpecialCharacters < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (propertyValueMinimum === true\r\n                && typeof (propertyValueMaximum) === \"number\") {\r\n\r\n                if (numberOfSpecialCharacters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (typeof (propertyValueMinimum) === \"number\"\r\n                && typeof (propertyValueMaximum) === \"number\") {\r\n\r\n                if (numberOfSpecialCharacters < propertyValueMinimum\r\n                    || numberOfSpecialCharacters > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName, propertyErrorText);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}
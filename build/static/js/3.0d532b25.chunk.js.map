{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/formriderjs/src/validators/checkInputContainNumber.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","CheckInputContainNumber","this","validationErrorArray","propertyKeyCapitalized","propertyValue","formInputName","formInputValue","propertyErrorText","formInputValueLength","numberOfNumbersInFormInput","numberCounter","character","characterAsNumber","Number","propertyValueMinimum","propertyValueMaximum","push"],"mappings":"oHAAA,8CACe,SAASA,EAA2BC,GACjD,GAAsB,qBAAXC,QAAgD,MAAtBD,EAAEC,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQJ,KAAOA,EAAI,YAA2BA,IAAK,CAC3D,IAAIK,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKL,EAAES,OAAe,CACxBC,MAAM,GAED,CACLA,MAAM,EACNC,MAAOX,EAAEK,OAGbO,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGR,GAIP,MAAM,IAAIS,UAAU,yIAGtB,IAAIC,EAGAC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLZ,EAAG,WACDS,EAAKhB,EAAEC,OAAOC,aAEhBM,EAAG,WACD,IAAIY,EAAOJ,EAAGK,OAEd,OADAH,EAAmBE,EAAKV,KACjBU,GAETR,EAAG,SAAWU,GACZH,GAAS,EACTF,EAAMK,GAERR,EAAG,WACD,IACOI,GAAoC,MAAhBF,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIG,EAAQ,MAAMF,O,0HClDbM,EAAb,WACI,aAAc,oBACVC,KAAKC,qBAAuB,GAFpC,qDAOaC,EAAwBC,EAAeC,EAAeC,EAAgBC,GAC3E,IAAIC,EAAuBF,EAAepB,OAEtCuB,EAA6B,EAC7BC,EAAgB,SAAUJ,GAAgB,oBACpBA,GADoB,IAC1C,2BAAsC,KAA7BK,EAA6B,QAC9BC,EAAoBC,OAAOF,GAC3BC,IAAsBA,GAAmC,MAAdD,GAE3CF,KALkC,gCAU9C,GAA+B,kBAAnBL,GAA+BI,EAAuB,EAAG,CACjE,IAAIM,EAAuBV,EAAc,GACrCW,EAAuBX,EAAc,IAGZ,IAAzBU,GAAmE,kBAA1BC,GACzCL,EAAcJ,GACVG,EAA6BM,GAC7Bd,KAAKC,qBAAqBc,KAAKX,EAAcE,IAGR,kBAA1BO,IAA+D,IAAzBC,GACrDL,EAAcJ,GAGVG,EAA6BK,GAC7Bb,KAAKC,qBAAqBc,KAAKX,EAAcE,IAER,kBAA1BO,GAAwE,kBAA1BC,IAC7DL,EAAcJ,IAEVG,EAA6BK,GAAwBL,EAA6BM,IAClFd,KAAKC,qBAAqBc,KAAKX,EAAcE,QAInB,mBAAnBH,GAAgCI,EAAuB,GAChD,IAAlBJ,GACAM,EAAcJ,GACVG,EAA6BD,GAC7BP,KAAKC,qBAAqBc,KAAKX,EAAcE,KAExB,IAAlBH,IAEPM,EAAcJ,GACVG,EAA6B,GAC7BR,KAAKC,qBAAqBc,KAAKX,EAAcE,IAIrB,kBAAnBH,GAA+BI,EAAuB,IACnEE,EAAcJ,GACXG,IAA+BL,GAC9BH,KAAKC,qBAAqBc,KAAKX,EAAeE,QAhE9D","file":"static/js/3.0d532b25.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export class CheckInputContainNumber{\r\n    constructor() {\r\n        this.validationErrorArray = [];\r\n    }\r\n\r\n    //verify if the input type is int or float (number)\r\n    //chek if inputs value is a number\r\n    validate(propertyKeyCapitalized, propertyValue, formInputName, formInputValue, propertyErrorText) {\r\n        let formInputValueLength = formInputValue.length;\r\n\r\n        let numberOfNumbersInFormInput = 0;\r\n        let numberCounter = function (formInputValue) {\r\n            for (let character of formInputValue) {\r\n                let characterAsNumber = Number(character);\r\n                if (characterAsNumber !== characterAsNumber || character === \" \") {\r\n                } else {\r\n                    numberOfNumbersInFormInput++;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof (propertyValue) === \"object\" && formInputValueLength > 0) {\r\n            let propertyValueMinimum = propertyValue[0];\r\n            let propertyValueMaximum = propertyValue[1];\r\n\r\n\r\n            if (propertyValueMinimum === true && typeof (propertyValueMaximum) === \"number\") {\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n\r\n            } else if (typeof (propertyValueMinimum) === \"number\" && propertyValueMaximum === true) {\r\n                numberCounter(formInputValue);\r\n\r\n                // here below : && numberOfNumbersInFormInput > 0 is for empty inputs\r\n                if (numberOfNumbersInFormInput < propertyValueMinimum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            } else if (typeof (propertyValueMinimum) === \"number\" && typeof (propertyValueMaximum) === \"number\") {\r\n                numberCounter(formInputValue);\r\n\r\n                if (numberOfNumbersInFormInput < propertyValueMinimum || numberOfNumbersInFormInput > propertyValueMaximum) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            }\r\n\r\n        } else if (typeof (propertyValue) === \"boolean\" && formInputValueLength > 0) {\r\n            if (propertyValue === true) {\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput < formInputValueLength) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            } else if (propertyValue === false) {\r\n\r\n                numberCounter(formInputValue);\r\n                if (numberOfNumbersInFormInput > 0) {\r\n                    this.validationErrorArray.push(formInputName,propertyErrorText);\r\n                }\r\n            }\r\n        }\r\n        else if (typeof (propertyValue) === \"number\" && formInputValueLength > 0){\r\n            numberCounter(formInputValue);\r\n            if(numberOfNumbersInFormInput !== propertyValue){\r\n                this.validationErrorArray.push(formInputName, propertyErrorText);\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}